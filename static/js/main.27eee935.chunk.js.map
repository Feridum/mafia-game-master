{"version":3,"sources":["store/game/game.types.ts","store/player/player.types.ts","store/player/player.model.ts","routing/routes.ts","store/game/game.model.ts","store/store.ts","shared/BaseLayout/BaseLayout.styles.ts","shared/BaseLayout/BaseLayout.tsx","views/Menu/Menu.styles.ts","views/Menu/Menu.tsx","views/Players/Players.styles.ts","views/Players/Player/player.styles.ts","views/Players/Player/Player.tsx","views/Players/Players.tsx","views/Players/AddPlayer/AddPlayer.tsx","views/Assign/Player/player.styles.ts","views/Assign/Player/Player.tsx","views/Assign/Assign.tsx","views/Assign/Fraction/Fraction.styles.ts","views/Assign/Fraction/Role/Role.styles.ts","views/Assign/Fraction/Role/Role.tsx","views/Assign/Fraction/Fraction.tsx","views/Game/Game/Game.styles.ts","views/Game/Game/Player/player.styles.ts","views/Game/Game/Player/Player.tsx","views/Game/Game/Actions/Actions.styles.ts","views/Game/Game/Actions/PlayersDialog/PlayersDialog.tsx","views/Game/Game/Actions/Action/Action.tsx","views/Game/Game/Actions/Actions.tsx","views/Game/Game/Game.tsx","views/Game/GameMenu/GameMenu.styles.ts","views/Game/GameMenu/GameMenu.tsx","routing/Routing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GamePeriodsType","DayActions","FirstNightActions","NightActions","ModifiersTypes","Fractions","TownRoles","MafiaRoles","SyndicateRoles","playerModel","items","addPlayer","action","state","payload","push","id","uuid","active","name","fraction","role","assignToRole","map","player","playerId","Object","objectSpread","Routes","mapNewModifiers","modifier","spyInfo","_modifiers","defineProperty","POISON","modifiers","poison","death","BLACKMAIL","blackmail","DEATH_ANGEL","deathAngel","DEVIL","DOCTOR","SPY","spy","concat","toConsumableArray","CRAZY","QUICK","DEATH","storeModel","game","exisitingGame","periodNumber","config","firstNight","actions","type","MAFIA_MEET","message","PROSTITUTE_MEET","day","KILL","MEET","night","MAFIA_KILL","SPY2","players","log","period","computed","DAY","NIGHT","roles","filter","fractions","uniq","applyModifier","includes","NONE","SYNDICATE","startGame","nextPeriod","previousPeriod","persistConfig","key","storage","store","createStore","reducerEnhancer","reducer","persistReducer","persistor","persistStore","useStoreActions","useStoreState","useStoreDispatch","useStyles","makeStyles","theme","container","minHeight","display","flexDirection","childContainer","marginTop","spacing","flexGrow","BaseLayout","_ref","children","toolbar","_ref$displayAppBar","displayAppBar","classes","react_default","a","createElement","className","AppBar","position","color","Toolbar","useMenuStyles","button","width","height","marginBottom","Menu","router","useContext","__RouterContext","BaseLayout_BaseLayout","Button","variant","root","onClick","history","PLAYERS","ASSIGN_PLAYERS","GAME_MENU","usePlayersStyles","overflowY","&::-webkit-scrollbar","addContainer","bottom","backgroundColor","usePlayerStyles","padding","Player","Paper","Typography","component","Players","Fab","aria-label","ADD_PLAYER","Add","Player_Player","AddPlayer","react_final_form_es","onSubmit","values","goBack","initialValues","render","handleSubmit","submitting","noValidate","fullWidth","required","TextField","label","validate","value","length","undefined","Grid","item","style","disabled","Assign","Player_Player_Player","useFractionStyles","minWidth","useRoleStyles","Role","addRole","match","params","Fraction","useTheme","_useState","useState","_useState2","slicedToArray","setValue","Tabs","onChange","event","newValue","indicatorColor","textColor","Tab","icon","LocationCity","Brightness3","Phone","lib_default","axis","direction","index","onChangeIndex","dir","Role_Role","TOWN","MAFIA","useGameStyles","scrollableContainer","useActionStyles","mapFractionsToInfo","_mapFractionsToInfo","PlayersDialog","open","onClose","isSpy","selectedPlayersIds","setSelectedPlayers","_useState3","_useState4","setSpyInfo","handleSave","handleSpySave","Dialog","fullScreen","DialogContent","react","ButtonGroup","handleClick","DialogActions","Action","_mapActionsToModifer","done","setDoneStatus","playerAction","setPlayerAction","_useState5","_useState6","isPlayersDialogOpen","setPlayerDialog","mapActionsToModifer","spyActions","PlayersDialog_PlayersDialog","Actions","firstNightActions","dayActions","nightActions","Box","Action_Action","Game","slideClassName","containerStyle","Actions_Actions","Game_Player_Player_Player","useGameMenuStyles","GameMenu","startNewGame","existingGame","GAME","Routing","react_router_dom","react_router","exact","path","MAIN_MENU","App","integration_react","loading","easy_peasy_esm","Container","maxWidth","CssBaseline","Routing_Routing","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27eee935.chunk.js","sourcesContent":["import { Action, Computed } from 'easy-peasy'\nimport { Fractions, Roles, Player } from 'store/player/player.types'\n\nexport enum GamePeriodsType {\n    DAY = 'DAY',\n    NIGHT = 'NIGHT',\n}\n\nexport enum DayActions {\n    KILL = 'KILL',\n    MEET = 'MEET',\n    QUICK = 'QUICK',\n    CRAZY = 'CRAZY',\n}\n\nexport enum FirstNightActions {\n    PROSTITUTE_MEET = 'PROSTITUTE_MEET',\n    MAFIA_MEET = 'MAFIA_MEET',\n    BLACKMAIL = 'BLACKMAIL',\n}\n\nexport enum NightActions {\n    MAFIA_KILL = 'MAFIA_KILL',\n    POISON = 'POISON',\n    DEATH_ANGEL = 'DEATH_ANGEL',\n    DOCTOR = 'DOCTOR',\n    DEVIL = 'DEVIL',\n    SPY = 'SPY',\n    SPY2 = 'SPY2',\n}\n\nexport type Actions = FirstNightActions | DayActions | NightActions\n\nexport interface ActionConfig {\n    type: Actions\n    message: string\n    action: boolean\n}\nexport interface Config {\n    actions: Array<ActionConfig>\n}\n\nexport enum ModifiersTypes {\n    POISON = 'POISON',\n    DEATH = 'DEATH',\n    BLACKMAIL = 'BLACKMAIL',\n    DEATH_ANGEL = 'DEATH_ANGEL',\n    SPY = 'SPY',\n    DOCTOR = 'DOCTOR',\n    DEVIL = 'DEVIL',\n    CRAZY = 'CRAZY',\n    QUICK = 'QUICK',\n}\n\nexport interface Modifiers {\n    poison: number\n    death: boolean\n    blackmail: boolean\n    deathAngel: number\n    spy: string[]\n}\n\nexport interface GamePlayer {\n    playerId: string\n    name: string\n    fraction: string\n    role: string\n    modifiers: Modifiers\n}\n\nexport interface GameModel {\n    exisitingGame: boolean\n    period: Computed<GameModel, GamePeriodsType>\n    roles: Computed<GameModel, string[]>\n    fractions: Computed<GameModel, string[]>\n    periodNumber: number\n    config: {\n        firstNight: Config\n        day: Config\n        night: Config\n    }\n    players: GamePlayer[]\n    log: Array<{\n        period: GamePeriodsType\n        periodNumber: number\n        actions: string[]\n    }>\n    applyModifier: Action<\n        GameModel,\n        {\n            players: string[]\n            modifier: ModifiersTypes\n            spyInfo?: string\n            newRole?: string\n        }\n    >\n    startGame: Action<GameModel, { players: Player[] }>\n    nextPeriod: Action<GameModel>\n    previousPeriod: Action<GameModel>\n}\n","import { Action } from 'easy-peasy'\n\nexport enum Fractions {\n    TOWN = 'Miasto',\n    MAFIA = 'Mafia',\n    SYNDICATE = 'Syndyk',\n}\n\nexport enum TownRoles {\n    SPY = 'Szpieg',\n    SPY2 = 'Szpieg 2.0',\n    CRAZY = 'Szaleniec',\n    QUICK = 'Szybki',\n    DOCTOR = 'Doktor',\n    NONE = 'Zwykły Obywatel',\n}\n\nexport enum MafiaRoles {\n    BOSS = 'Boss',\n    BLACKMAILER = 'Szantażysta',\n    POISON = 'Truciciel',\n}\n\nexport enum SyndicateRoles {\n    DEVIL = 'Diabolica',\n    DEATH_ANGEL = 'Anioł Śmierci',\n    PROSTITUTE = 'Prostytuta',\n    SAINT = 'Święty',\n    NONE = 'szeregowy Syndykatu',\n}\n\nexport type Roles = TownRoles & MafiaRoles & SyndicateRoles\n\nexport interface PlayerModel {\n    items: Player[]\n    addPlayer: Action<PlayerModel, string>\n    assignToRole: Action<\n        PlayerModel,\n        { playerId: string; role: string; fraction: Fractions }\n    >\n}\n\nexport interface Player {\n    id: string\n    name: string\n    active: boolean\n    role: string | null\n    fraction: Fractions | null\n}\n","import { PlayerModel, Player } from './player.types'\nimport { action } from 'easy-peasy'\nimport uuid from 'uuid/v4'\n\nexport const playerModel: PlayerModel = {\n    items: [],\n    addPlayer: action((state, payload) => {\n        state.items.push({\n            id: uuid(),\n            active: true,\n            name: payload,\n            fraction: null,\n            role: null,\n        })\n    }),\n    assignToRole: action((state, payload) => {\n        state.items = state.items.map<Player>(player => {\n            if (player.id === payload.playerId) {\n                return {\n                    ...player,\n                    fraction: payload.fraction,\n                    role: payload.role,\n                }\n            }\n\n            if (player.role === payload.role) {\n                return {\n                    ...player,\n                    fraction: null,\n                    role: null,\n                }\n            }\n            return player\n        })\n    }),\n}\n","export enum Routes {\n    MAIN_MENU = '/',\n    PLAYERS = '/players',\n    ADD_PLAYER = '/players/new',\n    ASSIGN_PLAYERS = '/fractions/players',\n    GAME_MENU = '/game/menu/',\n    GAME = '/game',\n}\n","import {\n    GameModel,\n    GamePeriodsType,\n    FirstNightActions,\n    DayActions,\n    GamePlayer,\n    ModifiersTypes,\n    Modifiers,\n    NightActions,\n} from './game.types'\nimport { action, computed } from 'easy-peasy'\nimport { Fractions, TownRoles, SyndicateRoles } from 'store/player/player.types'\nimport { uniq } from 'lodash'\n\nconst mapNewModifiers = (\n    player: GamePlayer,\n    modifier: ModifiersTypes,\n    spyInfo?: string\n): Modifiers => {\n    const modifiers: { [key in ModifiersTypes]: Modifiers } = {\n        [ModifiersTypes.POISON]: {\n            ...player.modifiers,\n            poison: player.modifiers.poison + 1,\n            death: player.modifiers.poison ? true : false,\n        },\n        [ModifiersTypes.BLACKMAIL]: {\n            ...player.modifiers,\n            blackmail: true,\n        },\n        [ModifiersTypes.DEATH_ANGEL]: {\n            ...player.modifiers,\n            deathAngel: player.modifiers.deathAngel + 1,\n            death: player.modifiers.deathAngel ? true : false,\n        },\n        [ModifiersTypes.DEVIL]: {\n            ...player.modifiers,\n        },\n        [ModifiersTypes.DOCTOR]: {\n            ...player.modifiers,\n            poison: 0,\n            death: true,\n        },\n        [ModifiersTypes.SPY]: {\n            ...player.modifiers,\n            spy: spyInfo\n                ? [...player.modifiers.spy, spyInfo]\n                : player.modifiers.spy,\n        },\n        [ModifiersTypes.CRAZY]: {\n            ...player.modifiers,\n            death: true,\n        },\n        [ModifiersTypes.QUICK]: {\n            ...player.modifiers,\n            death: true,\n        },\n        [ModifiersTypes.DEATH]: {\n            ...player.modifiers,\n            death: true,\n        },\n    }\n\n    return modifiers[modifier]\n}\n\nexport const gameModel: GameModel = {\n    exisitingGame: false,\n    periodNumber: 0,\n    config: {\n        firstNight: {\n            actions: [\n                {\n                    type: FirstNightActions.MAFIA_MEET,\n                    message: 'Mafia się poznaje',\n                    action: false,\n                },\n                {\n                    type: FirstNightActions.BLACKMAIL,\n                    message: 'Szantażysta wybiera ofiarę',\n                    action: true,\n                },\n                {\n                    type: FirstNightActions.PROSTITUTE_MEET,\n                    message: 'Prostytutka omamia ofiarę, który wyjawi wszystko',\n                    action: false,\n                },\n            ],\n        },\n        day: {\n            actions: [\n                {\n                    type: DayActions.KILL,\n                    message: 'Miasto postanowiło zabić',\n                    action: true,\n                },\n                {\n                    type: DayActions.MEET,\n                    message: 'Miasto chce poznać mieszkańca',\n                    action: true,\n                },\n                {\n                    type: DayActions.CRAZY,\n                    message: 'Szaleniec postanowił zabić',\n                    action: true,\n                },\n                {\n                    type: DayActions.QUICK,\n                    message: 'Szybki nie chce dać się zabić',\n                    action: true,\n                },\n            ],\n        },\n        night: {\n            actions: [\n                {\n                    type: NightActions.MAFIA_KILL,\n                    message: 'Mafia zabija',\n                    action: true,\n                },\n                {\n                    type: NightActions.POISON,\n                    message: 'Truciel zatruwa osobę',\n                    action: true,\n                },\n                {\n                    type: NightActions.DEATH_ANGEL,\n                    message: 'Anioł śmierci naznacza',\n                    action: true,\n                },\n                {\n                    type: NightActions.DOCTOR,\n                    message: 'Lekarz leczy',\n                    action: true,\n                },\n                {\n                    type: NightActions.DEVIL,\n                    message: 'Diabolica rozpoczyna seans spirytystyczny',\n                    action: true,\n                },\n                {\n                    type: NightActions.SPY,\n                    message: 'Szpiego poznaje tożsamość gracza',\n                    action: true,\n                },\n                {\n                    type: NightActions.SPY2,\n                    message: 'Szpieg v2 poznaje tożsamość gracza',\n                    action: true,\n                },\n            ],\n        },\n    },\n    players: [],\n    log: [],\n    period: computed(state =>\n        !!(state.periodNumber % 2) ? GamePeriodsType.DAY : GamePeriodsType.NIGHT\n    ),\n    roles: computed(state =>\n        state.players\n            .filter(player => !player.modifiers.death)\n            .map(player => player.role)\n    ),\n    fractions: computed(state =>\n        uniq(\n            state.players\n                .filter(player => !player.modifiers.death)\n                .map(player => player.fraction)\n        )\n    ),\n    applyModifier: action((state, payload) => {\n        state.players = state.players.map<GamePlayer>(player => {\n            if (payload.players.includes(player.playerId)) {\n                return {\n                    ...player,\n                    role:\n                        payload.modifier === ModifiersTypes.DEVIL &&\n                        player.modifiers.death\n                            ? SyndicateRoles.NONE\n                            : player.role,\n                    fraction:\n                        payload.modifier === ModifiersTypes.DEVIL &&\n                        player.modifiers.death\n                            ? Fractions.SYNDICATE\n                            : player.fraction,\n                    modifiers: mapNewModifiers(\n                        player,\n                        payload.modifier,\n                        payload.spyInfo\n                    ),\n                }\n            }\n\n            if (\n                payload.modifier === ModifiersTypes.CRAZY &&\n                player.role == TownRoles.CRAZY\n            ) {\n                return {\n                    ...player,\n                    role: TownRoles.NONE,\n                }\n            }\n            if (\n                payload.modifier === ModifiersTypes.QUICK &&\n                player.role === TownRoles.QUICK\n            ) {\n                return {\n                    ...player,\n                    role: TownRoles.NONE,\n                }\n            }\n            return player\n        })\n    }),\n    startGame: action((state, payload) => {\n        state.exisitingGame = true\n        state.players = payload.players.map<GamePlayer>(player => {\n            return {\n                playerId: player.id,\n                name: player.name,\n                role: player.role as string,\n                fraction: player.fraction as Fractions,\n                modifiers: {\n                    poison: 0,\n                    death: false,\n                    blackmail: false,\n                    deathAngel: 0,\n                    spy: [],\n                },\n            }\n        })\n    }),\n    nextPeriod: action(state => {\n        state.periodNumber = state.periodNumber + 1\n    }),\n    previousPeriod: action(state => {\n        state.periodNumber = state.periodNumber - 1\n    }),\n}\n","import { createStore } from 'easy-peasy'\nimport { StoreModel } from './store.types'\nimport { playerModel } from './player/player.model'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { gameModel } from './game/game.model'\n\nconst storeModel: StoreModel = {\n    player: playerModel,\n    game: gameModel,\n}\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n\nexport const store = createStore(storeModel, {\n    reducerEnhancer: (reducer: any): any => {\n        return persistReducer(persistConfig, reducer)\n    },\n})\n\nexport const persistor = persistStore(store)\nexport const useStoreActions = store.useStoreActions\nexport const useStoreDispatch = store.useStoreDispatch\nexport const useStoreState = store.useStoreState\n","import { makeStyles } from '@material-ui/core'\n\nexport const useStyles = makeStyles(theme => ({\n    container: {\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n\n    childContainer: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n    },\n}))\n","import React, { FC } from 'react'\nimport { useStyles } from './BaseLayout.styles'\nimport { AppBar, Toolbar } from '@material-ui/core'\nimport { BaseLayoutProps } from './BaseLayout.types'\n\nexport const BaseLayout: FC<BaseLayoutProps> = ({\n    children,\n    toolbar,\n    displayAppBar = false,\n}) => {\n    const classes = useStyles()\n    return (\n        <div className={classes.container}>\n            {displayAppBar && (\n                <AppBar position=\"static\" color=\"default\">\n                    <Toolbar>{toolbar}</Toolbar>\n                </AppBar>\n            )}\n            <div className={classes.childContainer}>{children}</div>\n        </div>\n    )\n}\n","import { makeStyles } from '@material-ui/core'\n\nexport const useMenuStyles = makeStyles(theme => ({\n    button: {\n        width: '100%',\n        height: 100,\n        marginBottom: theme.spacing(2),\n    },\n}))\n","import React, { FC, useContext } from 'react'\nimport { BaseLayout } from 'shared/BaseLayout/BaseLayout'\nimport { Button } from '@material-ui/core'\nimport { useMenuStyles } from './Menu.styles'\nimport { __RouterContext } from 'react-router'\nimport { Routes } from 'routing/routes'\n\nexport const Menu: FC = () => {\n    const classes = useMenuStyles()\n    const router = useContext(__RouterContext)\n\n    return (\n        <BaseLayout>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                classes={{ root: classes.button }}\n                onClick={() => router.history.push(Routes.PLAYERS)}\n            >\n                Gracze\n            </Button>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                classes={{ root: classes.button }}\n                onClick={() => router.history.push(Routes.ASSIGN_PLAYERS)}\n            >\n                Przypisz role\n            </Button>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                classes={{ root: classes.button }}\n                onClick={() => router.history.push(Routes.GAME_MENU)}\n            >\n                Zacznij gre\n            </Button>\n        </BaseLayout>\n    )\n}\n","import { makeStyles } from '@material-ui/core'\n\nexport const usePlayersStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: 0,\n        overflowY: 'scroll',\n        flexGrow: 1,\n        '&::-webkit-scrollbar': {\n            width: '0 !important',\n        },\n    },\n    addContainer: {\n        position: 'fixed',\n        bottom: 0,\n        height: 100,\n        backgroundColor: '#fff',\n    },\n}))\n","import { makeStyles } from '@material-ui/core'\n\nexport const usePlayerStyles = makeStyles(theme => ({\n    container: {\n        padding: theme.spacing(2),\n    },\n}))\n","import React, { FC } from 'react'\nimport { PlayerProps } from './player.types'\nimport { usePlayerStyles } from './player.styles'\nimport { Paper, Typography } from '@material-ui/core'\n\nexport const Player: FC<PlayerProps> = ({ player }) => {\n    const classes = usePlayerStyles()\n    return (\n        <Paper classes={{ root: classes.container }}>\n            <Typography variant=\"h5\" component=\"h3\">\n                {player.name}\n            </Typography>\n        </Paper>\n    )\n}\n","import React, { FC, useContext } from 'react'\nimport { BaseLayout } from 'shared/BaseLayout/BaseLayout'\nimport { Fab } from '@material-ui/core'\nimport { Add } from '@material-ui/icons'\nimport { usePlayersStyles } from './Players.styles'\nimport { __RouterContext } from 'react-router'\nimport { Routes } from 'routing/routes'\nimport { useStoreState } from 'store/store'\nimport { Player } from './Player/Player'\nimport { PlayersProps } from './Players.types'\n\nexport const Players: FC<PlayersProps> = () => {\n    const players = useStoreState(store => store.player.items)\n    const classes = usePlayersStyles()\n    const router = useContext(__RouterContext)\n\n    return (\n        <BaseLayout\n            displayAppBar\n            toolbar={\n                <Fab\n                    color=\"secondary\"\n                    aria-label=\"Add\"\n                    onClick={() => router.history.push(Routes.ADD_PLAYER)}\n                >\n                    <Add />\n                </Fab>\n            }\n        >\n            <div className={classes.container}>\n                {players.map(player => (\n                    <Player player={player} />\n                ))}\n            </div>\n        </BaseLayout>\n    )\n}\n","import React, { FC, useContext } from 'react'\nimport { BaseLayout } from 'shared/BaseLayout/BaseLayout'\nimport { Form, Field } from 'react-final-form'\nimport { TextField } from 'final-form-material-ui'\nimport { Grid, Button } from '@material-ui/core'\nimport { useStoreActions } from 'store/store'\nimport { __RouterContext } from 'react-router'\n\nexport const AddPlayer: FC = () => {\n    const router = useContext(__RouterContext)\n    const addPlayer = useStoreActions(actions => actions.player.addPlayer)\n\n    const handleSubmit = (values: { name: string }) => {\n        addPlayer(values.name)\n        router.history.goBack()\n    }\n    return (\n        <BaseLayout>\n            <Form\n                onSubmit={handleSubmit}\n                initialValues={{ name: '' }}\n                render={({ handleSubmit, submitting }) => (\n                    <form onSubmit={handleSubmit} noValidate>\n                        <Field\n                            fullWidth\n                            required\n                            name=\"name\"\n                            component={TextField}\n                            type=\"text\"\n                            label=\"Imie gracza\"\n                            validate={value =>\n                                value.length > 0 ? undefined : 'Pole wymagane'\n                            }\n                        />\n\n                        <Grid item style={{ marginTop: 16 }}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                type=\"submit\"\n                                disabled={submitting}\n                            >\n                                Dodaj\n                            </Button>\n                        </Grid>\n                    </form>\n                )}\n            />\n        </BaseLayout>\n    )\n}\n","import { makeStyles } from '@material-ui/core'\n\nexport const usePlayerStyles = makeStyles(theme => ({\n    container: {\n        padding: theme.spacing(2),\n    },\n}))\n","import React, { FC, useContext } from 'react'\nimport { PlayerProps } from './player.types'\nimport { usePlayerStyles } from './player.styles'\nimport { Paper, Typography } from '@material-ui/core'\nimport { __RouterContext } from 'react-router'\n\nexport const Player: FC<PlayerProps> = ({ player }) => {\n    const classes = usePlayerStyles()\n    const router = useContext(__RouterContext)\n\n    return (\n        <Paper\n            classes={{ root: classes.container }}\n            onClick={() =>\n                router.history.push(`/fractions/players/${player.id}`)\n            }\n        >\n            <Typography variant=\"h5\" component=\"h3\">\n                {player.name}\n            </Typography>\n            {player.role && (\n                <Typography variant=\"h6\" component=\"h6\">\n                    {player.role}\n                </Typography>\n            )}\n        </Paper>\n    )\n}\n","import React, { FC } from 'react'\nimport { BaseLayout } from 'shared/BaseLayout/BaseLayout'\nimport { useStoreState } from 'store/store'\nimport { Player } from './Player/Player'\n\nexport const Assign: FC = () => {\n    const players = useStoreState(store => store.player.items)\n    return (\n        <BaseLayout>\n            <div>\n                {players.map(player => (\n                    <Player player={player} />\n                ))}\n            </div>\n        </BaseLayout>\n    )\n}\n","import { makeStyles } from '@material-ui/core'\n\nexport const useFractionStyles = makeStyles(theme => ({\n    fullWidth: {\n        minWidth: 'unset',\n    },\n}))\n","import { makeStyles } from '@material-ui/core'\n\nexport const useRoleStyles = makeStyles(theme => ({\n    container: {\n        padding: theme.spacing(2),\n    },\n}))\n","import React, { FC, useContext } from 'react'\nimport { Paper, Typography } from '@material-ui/core'\nimport { __RouterContext } from 'react-router'\nimport { useRoleStyles } from './Role.styles'\nimport { RoleProps } from './Role.types'\nimport { useStoreActions } from 'store/store'\n\nexport const Role: FC<RoleProps> = ({ role, fraction }) => {\n    const classes = useRoleStyles()\n    const router = useContext(__RouterContext)\n\n    const addRole = useStoreActions(actions => actions.player.assignToRole)\n\n    const id = (router.match.params as { id: string }).id\n\n    const handleClick = () => {\n        id &&\n            addRole({\n                role: role,\n                playerId: id,\n                fraction: fraction,\n            })\n\n        router.history.goBack()\n    }\n\n    return (\n        <Paper classes={{ root: classes.container }} onClick={handleClick}>\n            <Typography variant=\"h5\" component=\"h3\">\n                {role}\n            </Typography>\n        </Paper>\n    )\n}\n","import React, { FC, useState } from 'react'\nimport SwipeableViews from 'react-swipeable-views'\nimport { BaseLayout } from 'shared/BaseLayout/BaseLayout'\nimport { AppBar, Tabs, Tab, useTheme } from '@material-ui/core'\nimport { Phone, LocationCity, Brightness3 } from '@material-ui/icons'\nimport { useFractionStyles } from './Fraction.styles'\nimport {\n    TownRoles,\n    MafiaRoles,\n    SyndicateRoles,\n} from 'store/player/player.types'\nimport { Role } from './Role/Role'\nimport { Fractions } from 'store/player/player.types'\n\nexport const Fraction: FC = () => {\n    const classes = useFractionStyles()\n    const theme = useTheme()\n    const [value, setValue] = useState(0)\n\n    function handleChange(event: any, newValue: number) {\n        setValue(newValue)\n    }\n\n    function handleChangeIndex(index: number) {\n        setValue(index)\n    }\n\n    return (\n        <BaseLayout>\n            <AppBar position=\"static\" color=\"default\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    <Tab\n                        icon={<LocationCity />}\n                        classes={{ fullWidth: classes.fullWidth }}\n                    />\n                    <Tab\n                        icon={<Brightness3 />}\n                        classes={{ fullWidth: classes.fullWidth }}\n                    />\n                    <Tab\n                        icon={<Phone />}\n                        classes={{ fullWidth: classes.fullWidth }}\n                    />\n                </Tabs>\n            </AppBar>\n            <SwipeableViews\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                index={value}\n                onChangeIndex={handleChangeIndex}\n            >\n                <div dir={theme.direction}>\n                    {Object.values(TownRoles).map((role: string) => (\n                        <Role role={role} fraction={Fractions.TOWN} />\n                    ))}\n                </div>\n                <div dir={theme.direction}>\n                    {Object.values(MafiaRoles).map((role: string) => (\n                        <Role role={role} fraction={Fractions.MAFIA} />\n                    ))}\n                </div>\n                <div dir={theme.direction}>\n                    {Object.values(SyndicateRoles).map((role: string) => (\n                        <Role role={role} fraction={Fractions.SYNDICATE} />\n                    ))}\n                </div>\n            </SwipeableViews>\n        </BaseLayout>\n    )\n}\n","import { makeStyles } from '@material-ui/core'\n\nexport const useGameStyles = makeStyles(theme => ({\n    fullWidth: {\n        minWidth: 'unset',\n    },\n    flexGrow: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n    },\n    scrollableContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: 0,\n        overflowY: 'scroll',\n        flexGrow: 1,\n        '&::-webkit-scrollbar': {\n            width: '0 !important',\n        },\n    },\n}))\n","import { makeStyles } from '@material-ui/core'\n\nexport const usePlayerStyles = makeStyles(theme => ({\n    container: {\n        padding: theme.spacing(2),\n    },\n}))\n","import React, { FC, useContext } from 'react'\nimport { PlayerProps } from './player.types'\nimport { usePlayerStyles } from './player.styles'\nimport { Paper, Typography, Button } from '@material-ui/core'\nimport { __RouterContext } from 'react-router'\n\nexport const Player: FC<PlayerProps> = ({ player }) => {\n    const classes = usePlayerStyles()\n\n    return (\n        <Button\n            classes={{ root: classes.container }}\n            disabled={player.modifiers.death}\n        >\n            <Typography variant=\"h5\" component=\"h5\">\n                {player.name} ({player.role})\n            </Typography>\n            }\n        </Button>\n    )\n}\n","import { makeStyles } from '@material-ui/core'\n\nexport const useActionStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n    },\n}))\n","import React, { FC, useState, Fragment } from 'react'\nimport {\n    Dialog,\n    Button,\n    DialogActions,\n    DialogContent,\n    Typography,\n    ButtonGroup,\n} from '@material-ui/core'\nimport { PlayersDialogProps } from './PlayersDialog.types'\nimport { useStoreState } from 'store/store'\nimport { GamePlayer } from 'store/game/game.types'\nimport { Fractions } from 'store/player/player.types'\n\nconst mapFractionsToInfo: { [key in string]: string } = {\n    [Fractions.MAFIA]: 'Nie z mafii',\n    [Fractions.SYNDICATE]: 'Nie z syndyku',\n    [Fractions.TOWN]: 'Nie z miasta',\n}\n\nexport const PlayersDialog: FC<PlayersDialogProps> = ({\n    open,\n    onClose,\n    onClick,\n    isSpy,\n}) => {\n    const [selectedPlayersIds, setSelectedPlayers] = useState<string[]>([])\n    const [spyInfo, setSpyInfo] = useState<GamePlayer | null>(null)\n    const players = useStoreState(store => store.game.players)\n\n    const handleClick = (player: GamePlayer) => {\n        if (isSpy) {\n            setSpyInfo(player)\n        } else {\n            if (selectedPlayersIds.includes(player.playerId)) {\n                setSelectedPlayers(\n                    selectedPlayersIds.filter(\n                        playerId => playerId !== player.playerId\n                    )\n                )\n            } else {\n                setSelectedPlayers([...selectedPlayersIds, player.playerId])\n            }\n        }\n    }\n\n    const handleSave = () => {\n        onClick(selectedPlayersIds, '')\n        onClose()\n    }\n\n    const handleSpySave = (playerId: string, spy: string) => {\n        onClick([playerId], spy)\n        onClose()\n    }\n\n    return (\n        <Dialog fullScreen open={open} onClose={onClose}>\n            <DialogContent>\n                {!!!spyInfo ? (\n                    players.map(player => (\n                        <Button\n                            fullWidth\n                            variant={\n                                selectedPlayersIds.includes(player.playerId)\n                                    ? 'contained'\n                                    : 'outlined'\n                            }\n                            onClick={() => handleClick(player)}\n                            key={player.playerId}\n                        >\n                            {player.name}\n                        </Button>\n                    ))\n                ) : (\n                    <Fragment>\n                        <Typography variant=\"h5\" component=\"h3\">\n                            {spyInfo!.name} {spyInfo!.fraction}\n                        </Typography>\n                        {spyInfo!.modifiers.spy.length === 0 && (\n                            <Typography variant=\"h5\" component=\"h3\">\n                                O tym graczu nie była jeszcze sprawdzona\n                                informacja\n                            </Typography>\n                        )}\n                        {spyInfo!.modifiers.spy.map(spy => (\n                            <Typography variant=\"h5\" component=\"h3\">\n                                {mapFractionsToInfo[spy]}\n                            </Typography>\n                        ))}\n                        <ButtonGroup fullWidth>\n                            {Object.values(Fractions)\n                                .filter(\n                                    fraction => fraction !== spyInfo!.fraction\n                                )\n                                .map(fraction => (\n                                    <Button\n                                        onClick={() =>\n                                            handleSpySave(\n                                                spyInfo!.playerId,\n                                                fraction\n                                            )\n                                        }\n                                    >\n                                        {mapFractionsToInfo[fraction]}\n                                    </Button>\n                                ))}\n                        </ButtonGroup>\n                    </Fragment>\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick={!!spyInfo ? () => setSpyInfo(null) : onClose}\n                    color=\"primary\"\n                >\n                    Anuluj\n                </Button>\n                {!isSpy && (\n                    <Button\n                        onClick={() => handleSave()}\n                        color=\"primary\"\n                        disabled={selectedPlayersIds.length === 0}\n                    >\n                        Zatwierdź zmainy dla graczy\n                    </Button>\n                )}\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import React, { FC, useState, Fragment } from 'react'\nimport { Button } from '@material-ui/core'\nimport { ActionProps } from './Action.types'\nimport { PlayersDialog } from '../PlayersDialog/PlayersDialog'\nimport { useStoreActions } from 'store/store'\nimport {\n    DayActions,\n    GamePlayer,\n    ModifiersTypes,\n    NightActions,\n} from 'store/game/game.types'\nimport { Fractions, TownRoles } from 'store/player/player.types'\n\nexport const Action: FC<ActionProps> = ({ action }) => {\n    const [done, setDoneStatus] = useState(false)\n    const [playerAction, setPlayerAction] = useState<{\n        action: (players: string[], spyInfo: string) => void\n        isSpy: boolean\n    }>({ action: () => {}, isSpy: false })\n    const [isPlayersDialogOpen, setPlayerDialog] = useState(false)\n    const applyModifier = useStoreActions(actions => actions.game.applyModifier)\n\n    const mapActionsToModifer: {\n        [key in string]: (players: string[], spyInfo: string) => void\n    } = {\n        [DayActions.KILL]: (players: string[]) =>\n            applyModifier({ players, modifier: ModifiersTypes.DEATH }),\n        [DayActions.MEET]: (players: string[], spyInfo: string) =>\n            applyModifier({ players, modifier: ModifiersTypes.SPY, spyInfo }),\n        [DayActions.CRAZY]: (players: string[]) =>\n            applyModifier({ players, modifier: ModifiersTypes.CRAZY }),\n        [DayActions.QUICK]: (players: string[]) =>\n            applyModifier({ players, modifier: ModifiersTypes.QUICK }),\n        [NightActions.MAFIA_KILL]: (players: string[]) =>\n            applyModifier({ players, modifier: ModifiersTypes.DEATH }),\n        [NightActions.DEATH_ANGEL]: (players: string[]) =>\n            applyModifier({ players, modifier: ModifiersTypes.DEATH_ANGEL }),\n        [NightActions.DEVIL]: (players: string[]) =>\n            applyModifier({ players, modifier: ModifiersTypes.DEVIL }),\n        [NightActions.DOCTOR]: (players: string[]) =>\n            applyModifier({ players, modifier: ModifiersTypes.DOCTOR }),\n        [NightActions.POISON]: (players: string[]) =>\n            applyModifier({ players, modifier: ModifiersTypes.POISON }),\n        [NightActions.SPY]: (players: string[], spyInfo: string) =>\n            applyModifier({ players, modifier: ModifiersTypes.SPY, spyInfo }),\n        [NightActions.SPY2]: (players: string[], spyInfo: string) =>\n            applyModifier({ players, modifier: ModifiersTypes.SPY, spyInfo }),\n    }\n\n    const spyActions: string[] = [\n        NightActions.SPY,\n        NightActions.SPY2,\n        DayActions.MEET,\n    ]\n\n    const handleClick = () => {\n        setDoneStatus(true)\n\n        if (action.action) {\n            setPlayerAction({\n                action: mapActionsToModifer[action.type],\n                isSpy: spyActions.includes(action.type),\n            })\n            setPlayerDialog(true)\n        }\n    }\n    return (\n        <Fragment>\n            <Button\n                fullWidth\n                variant={done ? 'contained' : 'outlined'}\n                onClick={handleClick}\n            >\n                {action.message}\n            </Button>\n            {isPlayersDialogOpen && (\n                <PlayersDialog\n                    open={isPlayersDialogOpen}\n                    onClose={() => setPlayerDialog(false)}\n                    onClick={playerAction.action}\n                    isSpy={playerAction.isSpy}\n                />\n            )}\n        </Fragment>\n    )\n}\n","import React, { FC, Fragment } from 'react'\nimport { Button, Box, ButtonGroup } from '@material-ui/core'\nimport { useActionStyles } from './Actions.styles'\nimport { useStoreState, useStoreActions } from 'store/store'\nimport { GamePeriodsType, DayActions } from 'store/game/game.types'\nimport { Action } from './Action/Action'\nimport { TownRoles } from 'store/player/player.types'\n\nexport const Actions: FC = () => {\n    const classes = useActionStyles()\n    const period = useStoreState(state => state.game.period)\n    const periodNumber = useStoreState(state => state.game.periodNumber)\n    const firstNightActions = useStoreState(\n        state => state.game.config.firstNight.actions\n    )\n    const dayActions = useStoreState(state => state.game.config.day.actions)\n    const nightActions = useStoreState(state => state.game.config.night.actions)\n    const nextPeriod = useStoreActions(state => state.game.nextPeriod)\n    const previousPeriod = useStoreActions(state => state.game.previousPeriod)\n    const roles = useStoreState(state => state.game.roles)\n    let actions = null\n\n    if (periodNumber === 0) {\n        actions = firstNightActions\n    } else if (period === GamePeriodsType.DAY) {\n        actions = dayActions.filter(action => {\n            if (action.type === DayActions.QUICK) {\n                return roles.includes(TownRoles.QUICK)\n            }\n            if (action.type === DayActions.CRAZY) {\n                return roles.includes(TownRoles.CRAZY)\n            }\n            return true\n        })\n    } else if (period === GamePeriodsType.NIGHT) {\n        actions = nightActions\n    }\n\n    return (\n        <Fragment>\n            <Box className={classes.container}>\n                {actions && actions.map(action => <Action action={action} />)}\n            </Box>\n            <ButtonGroup fullWidth>\n                {periodNumber > 0 && (\n                    <Button onClick={() => previousPeriod()}>Wróć</Button>\n                )}\n                <Button onClick={() => nextPeriod()}>Następny</Button>\n            </ButtonGroup>\n        </Fragment>\n    )\n}\n","import React, { FC, useState } from 'react'\nimport SwipeableViews from 'react-swipeable-views'\nimport { BaseLayout } from 'shared/BaseLayout/BaseLayout'\nimport { AppBar, Tabs, Tab, useTheme, Typography } from '@material-ui/core'\nimport { Phone, LocationCity, Brightness3 } from '@material-ui/icons'\nimport { useGameStyles } from './Game.styles'\nimport { useStoreState } from 'store/store'\nimport { Player } from './Player/Player'\nimport { Actions } from './Actions/Actions'\n\nexport const Game: FC = () => {\n    const classes = useGameStyles()\n    const theme = useTheme()\n    const [value, setValue] = useState(1)\n    const players = useStoreState(store => store.game.players)\n    const logs = useStoreState(store => store.game.log)\n\n    function handleChange(event: any, newValue: number) {\n        setValue(newValue)\n    }\n\n    function handleChangeIndex(index: number) {\n        setValue(index)\n    }\n\n    return (\n        <BaseLayout>\n            <AppBar position=\"static\" color=\"default\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    <Tab\n                        icon={<LocationCity />}\n                        classes={{ fullWidth: classes.fullWidth }}\n                    />\n                    <Tab\n                        icon={<Brightness3 />}\n                        classes={{ fullWidth: classes.fullWidth }}\n                    />\n                    <Tab\n                        icon={<Phone />}\n                        classes={{ fullWidth: classes.fullWidth }}\n                    />\n                </Tabs>\n            </AppBar>\n            <SwipeableViews\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                index={value}\n                onChangeIndex={handleChangeIndex}\n                className={classes.flexGrow}\n                slideClassName={classes.flexGrow}\n                containerStyle={{\n                    flexGrow: 1,\n                    display: 'flex',\n                }}\n            >\n                <div dir={theme.direction} className={classes.flexGrow}>\n                    Logs\n                </div>\n                <div dir={theme.direction} className={classes.flexGrow}>\n                    <Actions />\n                </div>\n                <div\n                    dir={theme.direction}\n                    className={classes.scrollableContainer}\n                >\n                    {players.map(player => (\n                        <Player player={player} />\n                    ))}\n                </div>\n            </SwipeableViews>\n        </BaseLayout>\n    )\n}\n","import { makeStyles } from '@material-ui/core'\n\nexport const useGameMenuStyles = makeStyles(theme => ({\n    button: {\n        width: '100%',\n        height: 100,\n        marginBottom: theme.spacing(2),\n    },\n}))\n","import React, { FC, useContext } from 'react'\nimport { BaseLayout } from 'shared/BaseLayout/BaseLayout'\nimport { Button } from '@material-ui/core'\nimport { useGameMenuStyles } from './GameMenu.styles'\nimport { __RouterContext } from 'react-router'\nimport { Routes } from 'routing/routes'\nimport { useStoreState, useStoreActions } from 'store/store'\n\nexport const GameMenu: FC = () => {\n    const classes = useGameMenuStyles()\n    const router = useContext(__RouterContext)\n    const players = useStoreState(store => store.player.items)\n    const startNewGame = useStoreActions(actions => actions.game.startGame)\n    const existingGame = useStoreState(store => store.game.exisitingGame)\n\n    const handleNewGame = () => {\n        startNewGame({ players })\n        router.history.push(Routes.GAME)\n    }\n    return (\n        <BaseLayout>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                classes={{ root: classes.button }}\n                onClick={handleNewGame}\n            >\n                Zacznij nową grę\n            </Button>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                classes={{ root: classes.button }}\n                onClick={() => router.history.push(Routes.GAME)}\n                disabled={!existingGame}\n            >\n                Kontynuuj\n            </Button>\n        </BaseLayout>\n    )\n}\n","import React, { FC } from 'react'\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom'\nimport { Menu } from 'views/Menu/Menu'\nimport { Players } from 'views/Players/Players'\nimport { Routes } from './routes'\nimport { AddPlayer } from 'views/Players/AddPlayer/AddPlayer'\nimport { Assign } from 'views/Assign/Assign'\nimport { Fraction } from 'views/Assign/Fraction/Fraction'\nimport { Game } from 'views/Game/Game/Game'\nimport { GameMenu } from 'views/Game/GameMenu/GameMenu'\n\nexport const Routing: FC = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path={Routes.MAIN_MENU} component={Menu} />\n                <Route exact path={Routes.PLAYERS} component={Players} />\n                <Route exact path={Routes.ADD_PLAYER} component={AddPlayer} />\n                <Route exact path={Routes.ASSIGN_PLAYERS} component={Assign} />\n                <Route exact path={Routes.GAME} component={Game} />\n                <Route exact path={Routes.GAME_MENU} component={GameMenu} />\n                <Route\n                    exact\n                    path={'/fractions/players/:id'}\n                    component={Fraction}\n                />\n            </Switch>\n        </Router>\n    )\n}\n","import React, { Fragment } from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { StoreProvider } from 'easy-peasy'\nimport { store, persistor } from './store/store'\nimport { Routing } from 'routing/Routing'\nimport { Container } from '@material-ui/core'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nconst App: React.FC = () => {\n    return (\n        <Fragment>\n            <PersistGate loading={<div>Loading</div>} persistor={persistor}>\n                <StoreProvider store={store}>\n                    <Container component=\"main\" maxWidth=\"xs\">\n                        <CssBaseline />\n                        <Routing />\n                    </Container>\n                </StoreProvider>\n            </PersistGate>\n        </Fragment>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}